#include "stm32f0xx_hal.h"

/**
 *Power management routine to duty-cycle 17 subsystems controlled by STM32
 */
HAL_StatusTypeDef HAL_pwr_management(uint32_t packetInfo) {

	uint32_t pInfo = packetInfo & 0b00000000000000111111111111111111;
	
	/* Reset and release all peripherals */  
	//__HAL_RCC_AHB_FORCE_RESET();
	//__HAL_RCC_AHB_RELEASE_RESET();
	//__HAL_RCC_APB1_FORCE_RESET();
	//__HAL_RCC_APB1_RELEASE_RESET();
	//__HAL_RCC_APB2_FORCE_RESET();
	//__HAL_RCC_APB2_RELEASE_RESET();

	
	//Reset Peripherals As Needed
	if(pInfo&0b00000000000000000000000000000001) {
		__HAL_RCC_GPIOA_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000000000010) {
		__HAL_RCC_GPIOB_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000000000100) {
		__HAL_RCC_GPIOC_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000000001000) {
		__HAL_RCC_GPIOF_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000000010000) {
		__HAL_RCC_TIM3_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000000100000) {
		__HAL_RCC_TIM14_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000001000000) {
		__HAL_RCC_WWDG_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000010000000) {
		__HAL_RCC_I2C1_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000000100000000) {
		__HAL_RCC_PWR_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000001000000000) {
		__HAL_RCC_SYSCFG_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000010000000000) {
		__HAL_RCC_ADC1_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000000100000000000) {
		__HAL_RCC_TIM1_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000001000000000000) {
		__HAL_RCC_SPI1_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000010000000000000) {
		__HAL_RCC_USART1_FORCE_RESET();
	}
	if(pInfo&0b00000000000000000100000000000000) {
		__HAL_RCC_TIM16_FORCE_RESET();
	}
	if(pInfo&0b00000000000000001000000000000000) {
		__HAL_RCC_TIM17_FORCE_RESET();
	}
	if(pInfo&0b00000000000000010000000000000000) {
		__HAL_RCC_DBGMCU_FORCE_RESET();
	}

	//Release Peripherals When Needed
	if(pInfo&0b00000000000000000000000000000001) {
		__HAL_RCC_GPIOA_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000000000010) {
		__HAL_RCC_GPIOB_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000000000100) {
		__HAL_RCC_GPIOC_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000000001000) {
		__HAL_RCC_GPIOF_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000000010000) {
		__HAL_RCC_TIM3_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000000100000) {
		__HAL_RCC_TIM14_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000001000000) {
		__HAL_RCC_WWDG_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000010000000) {
		__HAL_RCC_I2C1_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000000100000000) {
		__HAL_RCC_PWR_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000001000000000) {
		__HAL_RCC_SYSCFG_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000010000000000) {
		__HAL_RCC_ADC1_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000000100000000000) {
		__HAL_RCC_TIM1_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000001000000000000) {
		__HAL_RCC_SPI1_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000010000000000000) {
		__HAL_RCC_USART1_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000000100000000000000) {
		__HAL_RCC_TIM16_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000001000000000000000) {
		__HAL_RCC_TIM17_RELEASE_RESET();
	}
	if(pInfo&0b00000000000000010000000000000000) {
		__HAL_RCC_DBGMCU_RELEASE_RESET();
	}
	
	//This bit is kept high, if no signal is sent it will be low and a reset must occur
	if(!(pInfo&0b00000000000000100000000000000000)) {
		sd_zynq_reset();
	}
	
	/* Return function status */
	return HAL_OK;
}